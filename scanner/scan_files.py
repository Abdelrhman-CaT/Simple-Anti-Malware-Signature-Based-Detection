import os
from checks import check_path, check_path_directory
from hashing import get_file_hash_sha256
from db_ops import check_signature_in_db
from process_management import get_file_name_from_path, get_process_run_by_file, terminate
from real_time_buffers import add_to_real_time_total_files, add_to_malicious_real_time_buffer, add_to_real_time_malicious_files_with_process, add_to_real_time_malicious_files_without_process, add_to_real_time_malicious_files_with_process_termiated, add_to_real_time_malicious_files_with_process_not_termiated
from delete_files import delete_files
from file_management import list_files_in_directory

# Scan a single file or a list of files
def scan_files(files, real_time=False, one_file=False):
	global decision
	if(real_time == False and one_file == False):	# O(N * X * M * V)	N is number of files 	X is the number of / in the path 	M is the number of processes iterated
		num_all = len(files)
		num_detected = 0
		num_clean = 0
		num_detected_with_process = 0
		num_detected_with_no_process = 0
		num_detected_with_process_terminated = 0
		num_detected_with_process_non_terminated = 0
		detected_files = []

		for file in files: 			# O(N * X * M * V)	N is number of files 	X is the number of / in the path 	M is the number of processes iterated
			if(check_path(file)):
				hash_val = get_file_hash_sha256(file)	# O(V) V is the number of blocks in hashing function
				file = os.path.abspath(file)
				if(check_signature_in_db(hash_val)):
					print("\n")
					print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
					num_detected += 1
					detected_files.append(file)
					print("file (" + file + ") matches a signature. Checking if the file has a running process")
					file_name = get_file_name_from_path(file)			# O(X) X is the number of / in the path
					process = get_process_run_by_file(file_name)		# O(M) M is the number of processes iterated
					if(process):
						num_detected_with_process += 1
						print("The file has a running process. Terminating the process...")
						if(terminate(process)):
							num_detected_with_process_terminated += 1
							print("The process is terminated successfully")
							print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
							print("\n")
						else:
							num_detected_with_process_non_terminated += 1
							print("The process is NOT terminated")
							print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
							print("\n")
					else:
						num_detected_with_no_process += 1
						print("There are no running processes by this file")
						print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
						print("\n")
				else:
					num_clean += 1
					print("The file " + file + " is CLEAN")		
		
		print("\n\nNumber of files scanned: " + str(num_all))
		print("Number of clean files: " + str(num_clean))
		print("Number of malicious files: " + str(num_detected))
		print("Number of malicious files having running processess: " + str(num_detected_with_process))
		print("Number of malicious files having no running processess: " + str(num_detected_with_no_process))
		print("Number of malicious files having their running processes terminated: " + str(num_detected_with_process_terminated))
		print("Number of malicious files having their running processes Not terminated: " + str(num_detected_with_process_non_terminated))

		# Deleting malicious programs
		if(num_detected > 0):
			delete_files(detected_files)

	elif(one_file == True and real_time == False):		# O(X * M * V)
		# the parameter files represents a single file
		if(check_path(files)):
			malicious_Flag = False
			hash_val = get_file_hash_sha256(files)							# O(V) V is the number of blocks in the hashing funtion
			file = os.path.abspath(files)
			if(check_signature_in_db(hash_val)):
				malicious_Flag = True
				print("\n")
				print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
				print("File (" + file + ") matches a signature. Checking if the file has a running process")
				file_name = get_file_name_from_path(file)					# O(X) X is the number of / in the path
				process = get_process_run_by_file(file_name)				# O(M) M is the number of processes iterated
				if(process):
					print("The file has a running process. Terminating the process...")
					if(terminate(process)):
						print("The process is terminated successfully")
						print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
						print("\n")
					else:
						print("The process is NOT terminated")
						print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
						print("\n")
				else:
					print("There are no running processes by this file")
					print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
					print("\n")
			else:
				print("File " + file + " is CLEAN")

			if(malicious_Flag == True):
				delete_files(file, one_file=True)

	elif(one_file == True and real_time == True):	# O(X * M * V)
		# the parameter files represents a single file
		if(check_path(files)):
			malicious_Flag = False
			hash_val = get_file_hash_sha256(files)						# O(V) V is the number of blocks in the hashing funtion
			file = os.path.abspath(files)
			add_to_real_time_total_files(file)
			if(check_signature_in_db(hash_val)):
				malicious_Flag = True
				add_to_malicious_real_time_buffer(file)
				print("\n")
				print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
				print("File (" + file + ") matches a signature. Checking if the file has a running process")
				file_name = get_file_name_from_path(file)				# O(X) X is the number of / in the path
				process = get_process_run_by_file(file_name)			# O(M) M is the number of processes iterated
				if(process):
					print("The file has a running process. Terminating the process...")
					add_to_real_time_malicious_files_with_process(file)
					if(terminate(process)):
						print("The process is terminated successfully")
						add_to_real_time_malicious_files_with_process_termiated(file)
						print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
						print("\n")
					else:
						print("The process is NOT terminated")
						add_to_real_time_malicious_files_with_process_not_termiated(file)
						print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
						print("\n")
				else:
					print("There are no running processes by this file")
					add_to_real_time_malicious_files_without_process(file)
					print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
					print("\n")
			else:
				print("File " + file + " is CLEAN")




# Scan all files in a directory recursively
def scan_directory(directory):
	if(check_path_directory(directory)):
		files = list_files_in_directory(directory)		# O(N)
		scan_files(files)		# O(N * X * M * V)	N is number of files 	X is the number of / in the path 	M is the number of processes iterated V is the number of blocks in hashing function
