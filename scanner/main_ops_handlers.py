import os, time
from checks import check_path, check_path_directory, check_signature, check_signature_group, is_number
from db_ops import add_signature, delete_signature, mark_as_virus, unmark, get_all_signatures, check_signature_in_db
from scan_processes import scan_processes
from connect_to_api import get_signatures_from_api, send_signatures_to_api
from hashing import get_file_hash_sha256
from watchdog.observers import Observer
from scan_files import scan_files, scan_directory
from file_management import Get_new_files_created_or_modified_in_minutes
from real_time_file_scanning import File_Handler

def op1_handler():
	file = input("Enter the path of the file: ")
	if(check_path(file)):							# O(1)
		hash_val = get_file_hash_sha256(file)		# O(V) V is the number of blocks in hashing function
		print("The Hash Value Is: " + hash_val)
	else:
		print("This Path Is NOT A Valid File Path!")


def op2_handler():
	signature = input("Enter the signature to add: ")
	if(check_signature(signature)):				# O(N) N is the signature length
		result = add_signature(signature)
		if(result == False):
			print("Signature Added Successfully")
		else:
			print("Failed To Add The Signature ( " + str(result) + " )")
	else:
		print("Invalid SHA-256 Signature!")


def op3_handler():
	signature = input("Enter the signature to delete: ")
	if(check_signature(signature)):				# O(N) N is the signature length
		result = delete_signature(signature)
		if(result == False):
			print("Signature Deleted Successfully")
		else:
			print("Failed To Delete The Signature ( " + str(result) + " )")
	else:
		print("Invalid SHA-256 Signature!")


def op4_handler():
	file = input("Enter the path of the file: ")
	if(check_path(file)):
		print("\n")
		result = mark_as_virus(file)	# O(M) M is number of blocks in hashing function
		if not(result):
			print("The File Is Successfully Marked As A Virus")
		else:
			print("Failed To Mark The File As A Virus ( " + str(result) + " )")
	else:
		print("This Path Is NOT A Valid File Path!")


def op5_handler():
	file = input("Enter the path of the file: ")
	if(check_path(file)):
		print("\n")
		result = unmark(file)		# O(M) M is number of blocks in hashing function
		if(result == False):
			print("The File Is Successfully Unmarked From Being A Virus")
		else:
			print("Failed To Unmark The File From Being A Virus ( " + str(result) + " )")
	else:
		print("This Path Is NOT A Valid File Path!")


def op6_handler():
	print("SCANNING")
	print("------------------")
	scan_processes()	# O(N * M) N is number of programs and M is number of blocks in hashing function


def op7_handler():
	file = input("Enter the path of the file: ")
	print("\n")
	if(check_path(file)):
		scan_files(file, one_file=True)		# O(X * M * V) X is the number of / in the path M is the number of processes iterated V is the number of blocks in hashing function
	else:
		print("This Path Is NOT A Valid File Path!")


def op8_handler():
	directory = input("Enter the path of the directory: ")
	if(check_path_directory(directory)):
		absolute_path = os.path.abspath(directory)
		print("\nSCANNING (" + absolute_path + " )")
		print("-----------------------------------------------------------------------")
		scan_directory(directory)	# O(N * X * M * V)	N is number of files 	X is the number of / in the path 	M is the number of processes iterated V is the number of blocks in hashing function
	else:
		print("This Path Is NOT A Valid Directory Path!")


def op9_handler():
	print("\nSCANNING")
	print("------------------")
	directory = input("Enter the path of the directory: ")
	if(check_path_directory(directory)):
		minutes = input("Enter number of minutes: ")
		print("\n")
		if(is_number(minutes)):
			mins = float(minutes)
			if(mins > 0):
				files = Get_new_files_created_or_modified_in_minutes(directory ,str(mins))
				scan_files(files)		# O(N * X * M * V)	N is number of files 	X is the number of / in the path 	M is the number of processes iterated V is the number of blocks in hashing function
			else:
				print("Invalid Value For Minutes!")
		else:
			print("Invalid Value For Minutes!")
	else:
		print("This Path Is NOT A Valid Directory Path!")


def op10_handler():
	target_path = input("Enter the path of the directory: ")
	if(check_path_directory(target_path)):
		absolute_path = os.path.abspath(target_path)
		print("\nWAITING FOR NEW FILES IN ( " + absolute_path + " )")
		print("-----------------------------------------------------------------------")
		observer = Observer()
		event_handler = File_Handler()
		observer.schedule(event_handler, path=absolute_path, recursive=True)
		observer.start() # For each file discovered: O(X * M * V) X is the number of / in the path M is the number of processes iterated V is the number of blocks in the hashing funtion

		try:
			while(True):
				time.sleep(1)
		except KeyboardInterrupt:
			observer.stop()

		observer.join()
	else:
		print("This Path Is NOT A Valid Directory Path!")


def op11_handler(api, key):
	new_signatures = get_signatures_from_api(api, key)
	if(new_signatures):
		if(check_signature_group(new_signatures)):
			print("Loading Signatures...\n")
			error = False
			for s in new_signatures:	# O(N)
				if not(check_signature_in_db(s)):
					status = add_signature(s)
					if (status):
						print("Failed To Add The Signature To Local DB ( " + str(status) + " )")
						error = True
						break
			if not(error):
				print("Signatures Loaded Successfully From the Online Server")
		else:
			print("The server sent invalid signatures")
	else:
		print("There is a problem connecting to the server")


def op12_handler(api, key):
	signatures = get_all_signatures()	# O(N)
	if(send_signatures_to_api(api, key, signatures)):
		print("Signatures Sent Successfully To the Online Server")
	else:
		print("Failed to send the signatures to the online server")
