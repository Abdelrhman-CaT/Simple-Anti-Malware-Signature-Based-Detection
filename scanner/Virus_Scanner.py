import re, signal, subprocess, atexit, hashlib, sqlite3, psutil, os, sys, time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from connect_to_api import get_signatures_from_api, send_signatures_to_api

global real_time_total_files
global real_time_malicious_files_buffer
global real_time_malicious_files_with_process
global real_time_malicious_files_without_process
global real_time_malicious_files_with_process_termiated
global real_time_malicious_files_with_process_not_termiated

real_time_total_files = []
real_time_malicious_files_buffer = []
real_time_malicious_files_with_process = []
real_time_malicious_files_without_process = []
real_time_malicious_files_with_process_termiated = []
real_time_malicious_files_with_process_not_termiated = []

API = os.getenv("API_LINK")
KEY = os.getenv("API_KEY")


###############################################################################################################################################

# Database initialization
if not(os.path.exists('./SIGNATURES.db')):
	db = sqlite3.connect('SIGNATURES.db', check_same_thread=False)
	db.execute('''CREATE TABLE SIGNATURES
          (SIGN CHAR(64) PRIMARY KEY     NOT NULL
         );''')
	db.close()

db = sqlite3.connect('SIGNATURES.db', check_same_thread=False)
db.execute('''CREATE TABLE IF NOT EXISTS SIGNATURES
          (SIGN CHAR(64) PRIMARY KEY     NOT NULL
         );''')

###############################################################################################################################################

# Interrupt handler (Also handling interrupts in case of real-time monitoring)
def summary_interrupt(signal, frame):
	num_all = len(real_time_total_files)
	num_detected = len(real_time_malicious_files_buffer)
	num_clean = num_all - num_detected
	num_detected_with_process = len(real_time_malicious_files_with_process)
	num_detected_with_no_process = len(real_time_malicious_files_without_process)
	num_detected_with_process_terminated = len(real_time_malicious_files_with_process_termiated)
	num_detected_with_process_non_terminated = len(real_time_malicious_files_with_process_not_termiated)

	if(num_all > 0):
		print("\n\nNumber of files scanned: " + str(num_all))
		print("Number of clean files: " + str(num_clean))
		print("Number of malicious files: " + str(num_detected))
		print("Number of malicious files having running processess: " + str(num_detected_with_process))
		print("Number of malicious files having no running processess: " + str(num_detected_with_no_process))
		print("Number of malicious files having their running processes terminated: " + str(num_detected_with_process_terminated))
		print("Number of malicious files having their running processes Not terminated: " + str(num_detected_with_process_non_terminated))

		if(num_detected > 0):
			delete_files(real_time_malicious_files_buffer)

		print("\n\nBye!")
	else:
		print("\n\nBye!")

	sys.exit(0)

signal.signal(signal.SIGINT, summary_interrupt)

###############################################################################################################################################

# Helping functions
#********************

# Increase real_time_total_files by 1
def add_to_real_time_total_files(file):
	real_time_total_files.append(file)

#-------------------------------------------------------------------------------------------------

# Add the malicious real-time scanned files to the malicious buffer
def add_to_malicious_real_time_buffer(file):
	real_time_malicious_files_buffer.append(file)

#-------------------------------------------------------------------------------------------------

# Increase real_time_malicious_files_with_process by 1
def add_to_real_time_malicious_files_with_process(file):
	real_time_malicious_files_with_process.append(file)

#-------------------------------------------------------------------------------------------------

# Increase real_time_malicious_files_without_process by 1
def add_to_real_time_malicious_files_without_process(file):
	real_time_malicious_files_without_process.append(file)

#-------------------------------------------------------------------------------------------------

# Increase real_time_malicious_files_with_process_termiated by 1
def add_to_real_time_malicious_files_with_process_termiated(file):
	real_time_malicious_files_with_process_termiated.append(file)

#-------------------------------------------------------------------------------------------------

# Increase real_time_malicious_files_with_process_not_termiated by 1
def add_to_real_time_malicious_files_with_process_not_termiated(file):
	real_time_malicious_files_with_process_not_termiated.append(file)

#-------------------------------------------------------------------------------------------------

# Delete a file or multiple files (Handles all aspects of the deleting process starting from asking the user and ending with actual deleting)
def delete_files(files, one_file=False):
	global decision
	if(one_file == False):
		num_detected = len(files)
		while(True):
			decision = input("\n\nDo you want to delete all malicious files (Y/n)?")
			if(decision == "Y" or decision == "y" or decision == "n" or decision == "N" or decision == ""):
					break
		if(decision == "y" or decision == "Y" or decision == ""):
			# Deleting all malicious files
			num_failed_to_delete = 0
			print("\nDeleting all files ...")
			for file in files:
				try:
					os.remove(file)
					print("File (" + file + ") is deleted successfully!")
				except OSError:
					num_failed_to_delete += 1
					print("File (" + file + ") is NOT deleted!")
					
			print("\n\nNumber of malicious files deleted: " + str(num_detected-num_failed_to_delete))
			print("Number of malicious files NOT deleted: " + str(num_failed_to_delete))
				
		elif(decision == "n" or decision == "N"):
			print("The malicious files are NOT deleted!")

	else:
		# The parameter files represents a signle file
		file = files
		# Deleting the malicious file
		while(True):
			decision = input("\n\nDo you want to delete this file (Y/n)?")
			if(decision == "Y" or decision == "y" or decision == "n" or decision == "N" or decision == ""):
				break
		if(decision == "y" or decision == "Y" or decision == ""):
			# Deleting all malicious files
			print("\nDeleting the file ...")
			try:
				os.remove(file)
				print("File (" + file + ") is deleted successfully!")
			except OSError:
				print("File (" + file + ") is NOT deleted!")

		elif(decision == "n" or decision == "N"):
			print("The file is NOT deleted!")

#-------------------------------------------------------------------------------------------------

# Check path validity for files
def check_path(path):
	if(os.path.exists(path)):
		if(os.path.isfile(path)):
			return True
		else:
			return False
	else:
		return False

#-------------------------------------------------------------------------------------------------

# Check path validity for directories
def check_path_directory(path):
	if(os.path.exists(path)):
		if(os.path.isdir(path)):
			return True 
		else:
			return False
	else:
		return False

#-------------------------------------------------------------------------------------------------

# Terminate a program
def terminate(process):
	try:
		process.terminate()
		return True
	except psutil.Error as e:
		return False
	
#-------------------------------------------------------------------------------------------------

# Check signature validity
def check_signature(sig):
	sig = sig.replace(" ", "")
	if(len(sig) == 64):
		return True 
	else:
		return False

#-------------------------------------------------------------------------------------------------

# Check the validity of a group of signatures
def check_signature_group(sigs):
	for s in sigs:
		if not(check_signature(s)):
			return False
	return True

#-------------------------------------------------------------------------------------------------

# Add a signature to the db
def add_signature(signature):
	params = [signature]
	try:
		db.execute('''INSERT INTO SIGNATURES VALUES(?);''', params)
		db.commit()
		return False
	except sqlite3.Error as e:
		return e

#-------------------------------------------------------------------------------------------------

# Delete a signature from the db
def delete_signature(signature):
	params = [signature]
	if(os.path.exists('./SIGNATURES.db')):
		try:
			db.execute('''DELETE FROM SIGNATURES WHERE SIGN=?''', params)
			db.commit()
			return False
		except sqlite3.Error as e:
			return e
	else:
		return "Database Not Found"

#-------------------------------------------------------------------------------------------------

# Check if the signature is in the db
def check_signature_in_db(signature):
	params = [signature]
	query = db.execute('''SELECT * FROM SIGNATURES WHERE SIGN=?;''', params)
	res = query.fetchall()
	if(len(res) == 0):
		return False
	else:
		return True

#-------------------------------------------------------------------------------------------------

# Get all signatures from the db
def get_all_signatures():
	signs = []
	query = db.execute('''SELECT * FROM SIGNATURES ''')
	rows = query.fetchall()
	for row in rows:
		signs.append(row[0])
	return signs

#-------------------------------------------------------------------------------------------------

# Get hash values for a file using sha256
def get_file_hash_sha256(file):
	sha256_hash = hashlib.sha256()
	with open(file,"rb") as f:
		for block_of_512_bytes in iter(lambda: f.read(512),b""):
				sha256_hash.update(block_of_512_bytes)
		return sha256_hash.hexdigest()

#-------------------------------------------------------------------------------------------------

# Get all programs that have currently running processes
def get_programs():
	programs = []
	counter = 0

	for process in psutil.process_iter ():
		if(counter == 0):
			programs.append(process)
			counter += 1
		elif(process.exe() == ""):
			continue
		elif(process.exe() == programs[counter - 1].exe()):
			continue
		else:
			programs.append(process)
			counter += 1
	return programs

#-------------------------------------------------------------------------------------------------

# Check for viruses in the programs that have currently running processes
def scan_processes():
	num_infected = 0
	num_terminated = 0
	detected_files = []
	processes = get_programs()
	num_all = len(processes)
	
	for process in processes:
		path = process.exe()
		if(check_path(path)):
			hash = get_file_hash_sha256(path)
			if(check_signature_in_db(hash)):
				num_infected += 1
				detected_files.append(path)
				print("\n")
				print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
				print("Program (" + path + ") matches a signature! Terminating....")
				if(terminate(process)):
					num_terminated += 1
					print("Program (" + path + ") is terminated successfully!")
				else:
					print("Program (" + path + ") is NOT terminated!")
				print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
				print("\n")
			else:
				print(path + " is CLEAN")

	print("\n\nNumber of programs scanned: " + str(num_all))
	print("Number of clean programs: " + str(num_all - num_infected))
	print("Number of malicious programs: " + str(num_infected))
	print("Number of malicious programs terminated: " + str(num_terminated))
	print("Number of malicious programs NOT terminated: " + str(num_infected - num_terminated))
	
	# Deleting malicious programs
	if(num_infected > 0):
		delete_files(detected_files)

#-------------------------------------------------------------------------------------------------

# Mark a file as a virus
def mark_as_virus(file):
	file_sig = get_file_hash_sha256(file)
	result = add_signature(file_sig)
	return result

#-------------------------------------------------------------------------------------------------

# Unmark a file from being a virus
def unmark(file):
	file_sig = get_file_hash_sha256(file)
	result = delete_signature(file_sig)
	return result

#-------------------------------------------------------------------------------------------------

# Get file name from file path
def get_file_name_from_path(path):
	elements = path.split("/")
	return elements[len(elements) - 1]

#-------------------------------------------------------------------------------------------------

# Get the process run by a specific file
def get_process_run_by_file(file_name):
	for process in psutil.process_iter ():
		if(re.search(file_name + "$", str(process.exe()))):
			return process
	return False

#-------------------------------------------------------------------------------------------------

# Scan a single file or a list of files
def scan_files(files, real_time=False, one_file=False):
	global decision
	if(real_time == False and one_file == False):
		num_all = len(files)
		num_detected = 0
		num_clean = 0
		num_detected_with_process = 0
		num_detected_with_no_process = 0
		num_detected_with_process_terminated = 0
		num_detected_with_process_non_terminated = 0
		detected_files = []

		for file in files:
			if(check_path(file)):
				hash_val = get_file_hash_sha256(file)
				file = os.path.abspath(file)
				if(check_signature_in_db(hash_val)):
					print("\n")
					print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
					num_detected += 1
					detected_files.append(file)
					print("file (" + file + ") matches a signature. Checking if the file has a running process")
					file_name = get_file_name_from_path(file)
					process = get_process_run_by_file(file_name)
					if(process):
						num_detected_with_process += 1
						print("The file has a running process. Terminating the process...")
						if(terminate(process)):
							num_detected_with_process_terminated += 1
							print("The process is terminated successfully")
							print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
							print("\n")
						else:
							num_detected_with_process_non_terminated += 1
							print("The process is NOT terminated")
							print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
							print("\n")
					else:
						num_detected_with_no_process += 1
						print("There are no running processes by this file")
						print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
						print("\n")
				else:
					num_clean += 1
					print("The file " + file + " is CLEAN")		
		
		print("\n\nNumber of files scanned: " + str(num_all))
		print("Number of clean files: " + str(num_clean))
		print("Number of malicious files: " + str(num_detected))
		print("Number of malicious files having running processess: " + str(num_detected_with_process))
		print("Number of malicious files having no running processess: " + str(num_detected_with_no_process))
		print("Number of malicious files having their running processes terminated: " + str(num_detected_with_process_terminated))
		print("Number of malicious files having their running processes Not terminated: " + str(num_detected_with_process_non_terminated))

		# Deleting malicious programs
		if(num_detected > 0):
			delete_files(detected_files)

	elif(one_file == True and real_time == False):
		# the parameter files represents a single file
		if(check_path(files)):
			malicious_Flag = False
			hash_val = get_file_hash_sha256(files)
			file = os.path.abspath(files)
			if(check_signature_in_db(hash_val)):
				malicious_Flag = True
				print("\n")
				print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
				print("File (" + file + ") matches a signature. Checking if the file has a running process")
				file_name = get_file_name_from_path(file)
				process = get_process_run_by_file(file_name)
				if(process):
					print("The file has a running process. Terminating the process...")
					if(terminate(process)):
						print("The process is terminated successfully")
						print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
						print("\n")
					else:
						print("The process is NOT terminated")
						print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
						print("\n")
				else:
					print("There are no running processes by this file")
					print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
					print("\n")
			else:
				print("File " + file + " is CLEAN")

			if(malicious_Flag == True):
				delete_files(file, one_file=True)

	elif(one_file == True and real_time == True):
		# the parameter files represents a single file
		if(check_path(files)):
			malicious_Flag = False
			hash_val = get_file_hash_sha256(files)
			file = os.path.abspath(files)
			add_to_real_time_total_files(file)
			if(check_signature_in_db(hash_val)):
				malicious_Flag = True
				add_to_malicious_real_time_buffer(file)
				print("\n")
				print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
				print("File (" + file + ") matches a signature. Checking if the file has a running process")
				file_name = get_file_name_from_path(file)
				process = get_process_run_by_file(file_name)
				if(process):
					print("The file has a running process. Terminating the process...")
					add_to_real_time_malicious_files_with_process(file)
					if(terminate(process)):
						print("The process is terminated successfully")
						add_to_real_time_malicious_files_with_process_termiated(file)
						print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
						print("\n")
					else:
						print("The process is NOT terminated")
						add_to_real_time_malicious_files_with_process_not_termiated(file)
						print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
						print("\n")
				else:
					print("There are no running processes by this file")
					add_to_real_time_malicious_files_without_process(file)
					print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
					print("\n")
			else:
				print("File " + file + " is CLEAN")

#-------------------------------------------------------------------------------------------------
		
# Get the list of newly created files in the last m minutes
def Get_new_files_created_or_modified_in_minutes(directory, m):
	cmd = "find " + directory + " -type f -cmin -" + m
	files = subprocess.check_output(cmd, shell=True)
	files = files.decode("UTF-8")
	files = files.split("\n")
	file_list = []
	for file in files:
		if not(file == ""):
			file_list.append(file)
	return file_list

#-------------------------------------------------------------------------------------------------

# Check if the string represents a number
def is_number(str):
    try:
        float(str)
        return True
    except ValueError:
        return False

#-------------------------------------------------------------------------------------------------

# check if the file is being used by another process
def check_if_file_is_used_by_another_process(file):
	for process in psutil.process_iter():
		open_files = process.open_files()
		for f in open_files:
			if(f.path == file):
				return False
	return True

#-------------------------------------------------------------------------------------------------

# Monitoring new files as soon as they are created
class File_Handler(FileSystemEventHandler):
    def on_created(self, event):
        file = event.src_path
        if(check_path(file)):
        	while(True):
        		if(check_if_file_is_used_by_another_process(file)):
        			break
        	if(check_path(file)):
        		scan_files(file, one_file=True, real_time=True)

#-------------------------------------------------------------------------------------------------

# List all files in a directory recursively
def list_files_in_directory(directory):
	if(check_path_directory(directory)):
		files = []
		entries_in_directory = os.listdir(directory)
		for entry in entries_in_directory:
			entry_full_Path = os.path.join(directory, entry)
			if check_path_directory(entry_full_Path):
				files = files + list_files_in_directory(entry_full_Path)
			else:
				if(check_path(entry_full_Path)):
					files.append(entry_full_Path)
		return files

#-------------------------------------------------------------------------------------------------

# Scan all files in a directory recursively
def scan_directory(directory):
	if(check_path_directory(directory)):
		files = list_files_in_directory(directory)
		scan_files(files)

###############################################################################################################################################

# Main flow

while(True):	
	op = input('''Specify your operation:\n-----------------------
1: Get the hash value of a specific file
2: Add a SHA-256 signature to the database
3: Delete a signature from the database
4: Mark a file as a virus
5: Unmark a file from being a virus
6: Scan the processes in the system
7: Scan a certain file
8: Scan a certain directory (recursively for all sub-directories)
9: Scan the newly created or modified files in a specific directory within a specified number of minutes
10: Monitor and scan new files as soon as they are created
11: Load signatures from the online server
12: Send signatures to the online server
13: Exit

Your choice is: ''')
	print("\n")

	if(op == '1'):
		file = input("Enter the path of the file: ")
		if(check_path(file)):
			hash_val = get_file_hash_sha256(file)
			print("The Hash Value Is: " + hash_val)
		else:
			print("This Path Is NOT A Valid File Path!")
			
		print("\n*******************************************************\n")

	elif(op == '2'):
		signature = input("Enter the signature to add: ")
		if(check_signature(signature)):
			result = add_signature(signature)
			if(result == False):
				print("Signature Added Successfully")
			else:
				print("Failed To Add The Signature ( " + str(result) + " )")
		else:
			print("Invalid SHA-256 Signature!")

		print("\n*******************************************************\n")
	
	elif(op == '3'):
		signature = input("Enter the signature to delete: ")
		if(check_signature(signature)):
			result = delete_signature(signature)
			if(result == False):
				print("Signature Deleted Successfully")
			else:
				print("Failed To Delete The Signature ( " + str(result) + " )")
		else:
			print("Invalid SHA-256 Signature!")

		print("\n*******************************************************\n")
	
	elif(op == '4'):
		file = input("Enter the path of the file: ")
		if(check_path(file)):
			print("\n")
			result = mark_as_virus(file)
			if not(result):
				print("The File Is Successfully Marked As A Virus")
			else:
				print("Failed To Mark The File As A Virus ( " + str(result) + " )")
		else:
			print("This Path Is NOT A Valid File Path!")

		print("\n*******************************************************\n")
	
	elif(op == '5'):
		file = input("Enter the path of the file: ")
		if(check_path(file)):
			print("\n")
			result = unmark(file)
			if(result == False):
				print("The File Is Successfully Unmarked From Being A Virus")
			else:
				print("Failed To Unmark The File From Being A Virus ( " + str(result) + " )")
		else:
			print("This Path Is NOT A Valid File Path!")

		print("\n*******************************************************\n")

	elif(op == '6'):
		print("SCANNING")
		print("------------------")
		scan_processes()
		print("\n*******************************************************\n")

	elif(op == '7'):
		file = input("Enter the path of the file: ")
		print("\n")
		if(check_path(file)):
			scan_files(file, one_file=True)
		else:
			print("This Path Is NOT A Valid File Path!")

		print("\n*******************************************************\n")

	elif(op == '8'):
		directory = input("Enter the path of the directory: ")
		if(check_path_directory(directory)):
			absolute_path = os.path.abspath(directory)
			print("\nSCANNING (" + absolute_path + " )")
			print("-----------------------------------------------------------------------")
			scan_directory(directory)
		else:
			print("This Path Is NOT A Valid Directory Path!")

		print("\n*******************************************************\n")

	elif(op == '9'):
		print("\nSCANNING")
		print("------------------")
		directory = input("Enter the path of the directory: ")
		if(check_path_directory(directory)):
			minutes = input("Enter number of minutes: ")
			print("\n")
			if(is_number(minutes)):
				mins = float(minutes)
				if(mins > 0):
					files = Get_new_files_created_or_modified_in_minutes(directory ,str(mins))
					scan_files(files)
				else:
					print("Invalid Value For Minutes!")
			else:
				print("Invalid Value For Minutes!")
		else:
			print("This Path Is NOT A Valid Directory Path!")
		
		print("\n*******************************************************\n")

	elif(op == '10'):
		target_path = input("Enter the path of the directory: ")
		if(check_path_directory(target_path)):
			absolute_path = os.path.abspath(target_path)
			print("\nWAITING FOR NEW FILES IN ( " + absolute_path + " )")
			print("-----------------------------------------------------------------------")
			observer = Observer()
			event_handler = File_Handler()
			observer.schedule(event_handler, path=absolute_path, recursive=True)
			observer.start()

			try:
				while(True):
					time.sleep(1)
			except KeyboardInterrupt:
				observer.stop()

			observer.join()
		else:
			print("This Path Is NOT A Valid Directory Path!")

		print("\n*******************************************************\n")

	elif(op == '11'):
		new_signatures = get_signatures_from_api(API, KEY)
		if(new_signatures):
			if(check_signature_group(new_signatures)):
				print("Loading Signatures...\n")
				error = False
				for s in new_signatures:
					if not(check_signature_in_db(s)):
						status = add_signature(s)
						if (status):
							print("Failed To Add The Signature To Local DB ( " + str(status) + " )")
							error = True
							break
				if not(error):
					print("Signatures Loaded Successfully From the Online Server")
			else:
				print("The server sent invalid signatures")
		else:
			print("There is a problem connecting to the server")

		print("\n*******************************************************\n")
	
	elif(op == '12'):
		signatures = get_all_signatures()
		if(send_signatures_to_api(API, KEY, signatures)):
			print("Signatures Sent Successfully To the Online Server")
		else:
			print("Failed to send the signatures to the online server")

		print("\n*******************************************************\n")

	elif(op == '13'):
		break
	else:
		print("Invalid operation!")
		print("\n*******************************************************\n")

###############################################################################################################################################

db.close();

# Exit handler 

def summary_exit():
	print("Bye!")

atexit.register(summary_exit)