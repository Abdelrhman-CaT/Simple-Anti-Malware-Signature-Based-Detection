import signal, atexit

# Importing interrupt handler and exit handler
from exit_and_interrupt_handlers import summary_interrupt, summary_exit

# Activating DB initialization
from db_ops import db

# Operations handlers
from main_ops_handlers import op1_handler, op2_handler, op3_handler, op4_handler, op5_handler, op6_handler, op7_handler, op8_handler, op9_handler, op10_handler, op11_handler, op12_handler

API = ""
KEY = ""

###############################################################################################################################################

# Register interrupt and exit handlers
signal.signal(signal.SIGINT, summary_interrupt)
atexit.register(summary_exit)

###############################################################################################################################################

# Main flow

while(True):	
	op = input('''Specify your operation:\n-----------------------
1: Get the hash value of a specific file
2: Add a SHA-256 signature to the database
3: Delete a signature from the database
4: Mark a file as a virus
5: Unmark a file from being a virus
6: Scan the processes in the system
7: Scan a certain file
8: Scan a certain directory (recursively for all sub-directories)
9: Scan the newly created or modified files in a specific directory within a specified number of minutes
10: Monitor and scan new files as soon as they are created
11: Load signatures from the online server
12: Send signatures to the online server
13: Exit

Your choice is: ''')
	print("\n")

	if(op == '1'):
		op1_handler()
		print("\n*******************************************************\n")

	elif(op == '2'):
		op2_handler()
		print("\n*******************************************************\n")
	
	elif(op == '3'):
		op3_handler()
		print("\n*******************************************************\n")
	
	elif(op == '4'):
		op4_handler()
		print("\n*******************************************************\n")
	
	elif(op == '5'):
		op5_handler()
		print("\n*******************************************************\n")

	elif(op == '6'):
		op6_handler()
		print("\n*******************************************************\n")

	elif(op == '7'):
		op7_handler()
		print("\n*******************************************************\n")

	elif(op == '8'):
		op8_handler()
		print("\n*******************************************************\n")

	elif(op == '9'):
		op9_handler()
		print("\n*******************************************************\n")

	elif(op == '10'):
		op10_handler()
		print("\n*******************************************************\n")

	elif(op == '11'):		# O(N)
		op11_handler(API, KEY)
		print("\n*******************************************************\n")
	
	elif(op == '12'):	# O(N)
		op12_handler(API, KEY)
		print("\n*******************************************************\n")

	elif(op == '13'):
		break
	else:
		print("Invalid operation!")
		print("\n*******************************************************\n")

###############################################################################################################################################

db.close();
