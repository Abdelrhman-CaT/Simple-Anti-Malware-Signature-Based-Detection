import re, glob, signal, subprocess, atexit, hashlib, sqlite3, psutil, os, sys

if not(os.path.exists('./SIGNATURES.db')):
	db = sqlite3.connect('SIGNATURES.db')
	db.execute('''CREATE TABLE SIGNATURES
          (SIGN VARCHAR(64) PRIMARY KEY     NOT NULL
         );''')
	db.close()

db = sqlite3.connect('SIGNATURES.db')

###############################################################################################################################################

# Interrupt handler
def summary_interrupt(signal, frame):
    print("\n\nBye!")
    sys.exit(0)

signal.signal(signal.SIGINT, summary_interrupt)

###############################################################################################################################################

# Terminate a program
def terminate(process_id):
	kill_switch = "kill " + process_id 
	try:
		status = subprocess.check_output(kill_switch, shell=True)
		return True
	except subprocess.CalledProcessError as e:
		return False
	
# Add a signature to the db
def add_signature(signature):
	params = [signature]
	try:
		db.execute('''INSERT INTO SIGNATURES VALUES(?);''', params)
		db.commit()
		print("Signature added successfully")
	except sqlite3.Error as e:
		print(e)

# Delete a signature from the db
def delete_signature(signature):
	params = [signature]
	db.execute('''DELETE FROM SIGNATURES WHERE SIGN=?''', params)
	db.commit()
	print("Signature deleted successfully")

# Check if the signature is in the db
def check_signature_in_db(signature):
	params = [signature]
	query = db.execute('''SELECT * FROM SIGNATURES WHERE SIGN=?;''', params)
	res = query.fetchall()
	if(len(res) == 0):
		return False
	else:
		return True

# Get hash values for a file using sha256
def get_file_hash_sha256(file):
	sha256_hash = hashlib.sha256()
	with open(file,"rb") as f:
		for block_of_4k_bytes in iter(lambda: f.read(4096),b""):
			sha256_hash.update(block_of_4k_bytes)
		return sha256_hash.hexdigest()

# Get all programs that have active processes (full_path, process_id)
def get_programs():
	paths = []
	new_paths = []
	for process in psutil.process_iter ():
	    path = process.exe()
	    id = str(process.pid)
	    paths.append([path, id])

	prev = ["",""]

	for path in paths:
		if(path[0] == ""):
			continue
		elif(path[0] == prev[0]):
			continue
		else:
			new_paths.append(path)
			prev = path
	return new_paths

# Check for viruses
def scan():
	num_infected = 0
	num_terminated = 0

	processes = get_programs()
	num_all = len(processes)
	
	for process in processes:
		path = process[0]
		id = process[1]
		hash = get_file_hash_sha256(path)
		if(check_signature_in_db(hash)):
			num_infected += 1
			print("\n")
			print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
			print("Program " + path + " matches a signature! Terminating....")
			if(terminate(id)):
				num_terminated += 1
				print(path + " is terminated successfully!")
			else:
				print(path + " is not terminated!")
			print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
			print("\n")
		else:
			print(path + " is CLEAN")

	print("\n\nNumber of programs scanned: " + str(num_all))
	print("Number of clean programs: " + str(num_all - num_infected))
	print("Number of malicious programs: " + str(num_infected))
	print("Number of malicious programs terminated: " + str(num_terminated))

###############################################################################################################################################

# Actual work

while(True):
	op = input('''Specify your operation:\n-----------------------
1: Add a signature to the database
2: Delete a signature from the database
3: Scan the system
4: Get the hash value of a specific file
5: Exit

Your choice is: ''')
	print("\n")

	if(op == '1'):
		signature = input("Enter the signature to add: ")
		add_signature(signature)
		print("\n*******************************************************\n")
	elif(op == '2'):
		signature = input("Enter the signature to delete: ")
		delete_signature(signature)
		print("\n*******************************************************\n")
	elif(op == '3'):
		print("SCANNING")
		print("------------------")
		scan()
		print("\n*******************************************************\n")
	elif(op == '4'):
		file = input("Enter the path of the file: ")
		print("The hash value is: " + get_file_hash_sha256(file))
		print("\n*******************************************************\n")
	elif(op == '5'):
		break
	else:
		print("Invalid operation!")
		print("\n*******************************************************\n")


###############################################################################################################################################

db.close();

# Exit handler 

def summary_exit():
	print("Bye!")

atexit.register(summary_exit)






