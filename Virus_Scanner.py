import re, glob, signal, subprocess, atexit, hashlib, sqlite3, psutil, os, sys

if not(os.path.exists('./SIGNATURES.db')):
	db = sqlite3.connect('SIGNATURES.db')
	db.execute('''CREATE TABLE SIGNATURES
          (SIGN VARCHAR(64) PRIMARY KEY     NOT NULL
         );''')
	db.close()

db = sqlite3.connect('SIGNATURES.db')

###############################################################################################################################################

# Interrupt handler
def summary_interrupt(signal, frame):
    print("\n\nBye!")
    sys.exit(0)

signal.signal(signal.SIGINT, summary_interrupt)

###############################################################################################################################################

# Terminate a program (UPDATED)
def terminate(process):
	try:
		process.terminate()
		return True
	except psutil.Error as e:
		return False
	
# Add a signature to the db (UPDATED)
def add_signature(signature):
	params = [signature]
	try:
		db.execute('''INSERT INTO SIGNATURES VALUES(?);''', params)
		db.commit()
		return False
	except sqlite3.Error as e:
		return e

# Delete a signature from the db (UPDATED)
def delete_signature(signature):
	params = [signature]
	try:
		db.execute('''DELETE FROM SIGNATURES WHERE SIGN=?''', params)
		db.commit()
		return False
	except sqlite3.Error as e:
		return e

# Check if the signature is in the db
def check_signature_in_db(signature):
	params = [signature]
	query = db.execute('''SELECT * FROM SIGNATURES WHERE SIGN=?;''', params)
	res = query.fetchall()
	if(len(res) == 0):
		return False
	else:
		return True

# Get hash values for a file using sha256 (UPDATED)
def get_file_hash_sha256(file):
	if(os.path.exists(file)):
		if(os.path.isfile(file)):
			sha256_hash = hashlib.sha256()
			with open(file,"rb") as f:
				for block_of_4k_bytes in iter(lambda: f.read(4096),b""):
					sha256_hash.update(block_of_4k_bytes)
				return sha256_hash.hexdigest()
		else:
			return 'd'
	else:
		return 'i'

# Get all programs that have currently running processes (UPDATED)
def get_programs():
	programs = []
	counter = 0

	for process in psutil.process_iter ():
		if(counter == 0):
			programs.append(process)
			counter += 1
		elif(process.exe() == ""):
			continue
		elif(process.exe() == programs[counter - 1].exe()):
			continue
		else:
			programs.append(process)
			counter += 1
	return programs

# Check for viruses (UPDATED)
def scan_processes():
	num_infected = 0
	num_terminated = 0

	processes = get_programs()
	num_all = len(processes)
	
	for process in processes:
		path = process.exe()
		hash = get_file_hash_sha256(path)
		if(check_signature_in_db(hash)):
			num_infected += 1
			print("\n")
			print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
			print("Program " + path + " matches a signature! Terminating....")
			if(terminate(process)):
				num_terminated += 1
				print(path + " is terminated successfully!")
			else:
				print(path + " is not terminated!")
			print("%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%")
			print("\n")
		else:
			print(path + " is CLEAN")

	print("\n\nNumber of programs scanned: " + str(num_all))
	print("Number of clean programs: " + str(num_all - num_infected))
	print("Number of malicious programs: " + str(num_infected))
	print("Number of malicious programs terminated: " + str(num_terminated))

# Mark a file as a virus (NEW)
def mark_as_virus(file):
	file_sig = get_file_hash_sha256(file)
	if(file_sig == 'i'):
		return 'i'
	elif(file_sig == 'd'):
		return 'd'
	else:
		result = add_signature(file_sig)
		if(result == False):
			return 's'
		else:
			return 'u'

# Unmark a file from being a virus (NEW)
def unmark(file):
	file_sig = get_file_hash_sha256(file)
	if(file_sig == 'i'):
		return 'i'
	elif(file_sig == 'd'):
		return 'd'
	else:
		result = delete_signature(file_sig)
		if(result == False):
			return 'x'
		else:
			return result

# Render output (NEW)
def render(code):
	if(code == 'i'):
		return "Invalid Path!"
	elif(code == 'd'):
		return "This Path Is Not A File Path!"
	elif(code == 's'):
		return "The File Is Successfully Marked As A Virus"
	elif(code == 'u'):
		return "The File Signature Is Already Stored In The Database!"
	elif(code == 'x'):
		return "The File Is Successfully Unmarked From Being A Virus"

###############################################################################################################################################

# Actual work

while(True):
	op = input('''Specify your operation:\n-----------------------
1: Add a signature to the database
2: Delete a signature from the database
3: Scan the processes
4: Get the hash value of a specific file
5: Mark a file as a virus
6- Unmark a file from being a virus
7: Exit

Your choice is: ''')
	print("\n")

	if(op == '1'):
		signature = input("Enter the signature to add: ")
		if(len(signature) == 64):
			result = add_signature(signature)
			if(result == False):
				print("Signature Added Successfully")
			else:
				print("Failed To Add The Signature ( " + str(result) + " )")
		else:
			print("Invalid Signature!")
		print("\n*******************************************************\n")
	
	elif(op == '2'):
		signature = input("Enter the signature to delete: ")
		result = delete_signature(signature)
		if(result == False):
			print("Signature Deleted Successfully")
		else:
			print("Failed To Delete The Signature ( " + str(result) + " )")
		print("\n*******************************************************\n")
	
	elif(op == '3'):
		print("SCANNING")
		print("------------------")
		scan_processes()
		print("\n*******************************************************\n")
	
	elif(op == '4'):
		file = input("Enter the path of the file: ")
		hash_val = get_file_hash_sha256(file)
		if(hash_val == 'd' or hash_val == 'i'):
			print(render(hash_val))
		else:
			print("The Hash Value Is: " + hash_val)
		print("\n*******************************************************\n")
	
	elif(op == '5'):
		file = input("Enter the path of the file: ")
		print(render(mark_as_virus(file)))
		print("\n*******************************************************\n")
	
	elif(op == '6'):
		file = input("Enter the path of the file: ")
		result = unmark(file)
		if(result == 'i' or result == 'd' or result == 'x'):
			print(render(result))
		else:
			print(result)
		print("\n*******************************************************\n")

	elif(op == '7'):
		break
	else:
		print("Invalid operation!")
		print("\n*******************************************************\n")

###############################################################################################################################################

db.close();

# Exit handler 

def summary_exit():
	print("Bye!")

atexit.register(summary_exit)